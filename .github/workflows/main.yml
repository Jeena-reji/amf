name: IOSMCN Master workflow

on:
  pull_request:
    branches:
      - iosmcnmaster
  push:
    branches:
      - iosmcnmaster

jobs:
  staticcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: WillAbides/setup-go-faster@v1.14.0
        with:
          go-version-file: 'go.mod'

      - uses: dominikh/staticcheck-action@v1.3.1
        with:
          version: latest
          install-go: false
          output-format: json  # Change the output format to JSON

      - name: Generate Staticcheck Summary
        run: |
          # After staticcheck completes, parse the JSON report
          staticcheck -f=json ./... > staticcheck-report.json
          
          # Use jq to extract the desired summary (e.g., number of projects scanned, succeeded, etc.)
          projects_scanned=$(jq 'length' staticcheck-report.json)
          failed_projects=$(jq '[.[] | select(.status == "failed")] | length' staticcheck-report.json)
          succeeded_projects=$(jq '[.[] | select(.status == "passed")] | length' staticcheck-report.json)
          skipped_projects=$(jq '[.[] | select(.status == "skipped")] | length' staticcheck-report.json)
          warnings=$(jq '[.[] | select(.status == "warning")] | length' staticcheck-report.json)

          echo "Projects Scanned: $projects_scanned"
          echo "Projects Failed: $failed_projects"
          echo "Projects Succeeded: $succeeded_projects"
          echo "Projects Skipped: $skipped_projects"
          echo "Analysis Warnings: $warnings"

          # Optionally, save a concise summary to a file
          echo "$projects_scanned projects scanned; $skipped_projects skipped, $succeeded_projects succeeded, $failed_projects failed, $warnings analysis warnings" > staticcheck-summary.txt

          # Upload the detailed staticcheck report and summary as artifacts
          upload-artifact -name staticcheck-report -path staticcheck-report.json
          upload-artifact -name staticcheck-summary -path staticcheck-summary.txt
          
  lint:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'ios-mcn-core'
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      
      - name: Clean Checksum
        run: go mod tidy

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6.1.0
        with:
          version: latest
          args: -v --config ./.golangci.yml --timeout=10m

  hadolint:
    name: hadolint
    runs-on: ubuntu-latest
    if: github.repository_owner == 'ios-mcn-core'

    steps:
      - uses: actions/checkout@v4

      - name: Dockerfile linter
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          ignore: DL3008,DL3018

  license-check:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'ios-mcn-core'
    steps:
      - uses: actions/checkout@v4

      - name: reuse lint
        uses: fsfe/reuse-action@v4

  fossa-check:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'ios-mcn-core'
    steps:
      - uses: actions/checkout@v4

      - name: FOSSA scan
        uses: fossa-contrib/fossa-action@v3
        with:
          fossa-api-key: 0c3bbcdf20e157bbd487dae173751b28

  unit-tests:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'ios-mcn-core'
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      
      - name: Clean Checksum
        run: go mod tidy

      - name: Unit tests
        run: go test ./...

  docker-build-push-images:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'ios-mcn-core'
    needs: unit-tests

    env:
      REGISTRY: ghcr.io
      DOCKER_REGISTRY: ghcr.io/
      DOCKER_REPOSITORY: ios-mcn-core/
      
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      
      - name: Clean Checksum
        run: go mod tidy

      - run: echo GIT_SHA_SHORT=$(git rev-parse --short HEAD) >> $GITHUB_ENV

      - uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCRUSER }}
          password: ${{ secrets.GHCRPASS }}

      - name: Build and push "master-latest" Docker image
        env:
          DOCKER_TAG: master-latest
        run: |
          make docker-build
          make docker-push

      - name: Build and push "master-GIT_SHA" Docker image
        env:
          DOCKER_TAG: master-${{ env.GIT_SHA_SHORT }}
        run: |
          make docker-build
          make docker-push
